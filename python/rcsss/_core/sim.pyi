# ATTENTION: auto generated from C++ code, use `make stubgen` to update!
"""
sim module
"""
from __future__ import annotations

import typing

import numpy
import rcsss._core.common

__all__ = ["FR3", "FR3Config", "FR3State", "Sim"]

class FR3(rcsss._core.common.Robot):
    def __init__(self, sim: Sim, id: str, rlmdl: str) -> None: ...
    def get_parameters(self) -> FR3Config: ...
    def get_state(self) -> FR3State: ...
    def reset(self) -> None: ...
    def set_parameters(self, cfg: FR3Config) -> bool: ...

class FR3Config(rcsss._core.common.RConfig):
    ik_duration_in_milliseconds: int
    joint_rotational_tolerance: float
    realtime: bool
    seconds_between_callbacks: float
    tcp_offset: rcsss._core.common.Pose
    trajectory_trace: bool
    def __init__(self) -> None: ...

class FR3State(rcsss._core.common.RState):
    def __init__(self) -> None: ...
    @property
    def collision(self) -> bool: ...
    @property
    def ik_success(self) -> bool: ...
    @property
    def inverse_tcp_offset(self) -> rcsss._core.common.Pose: ...
    @property
    def is_arrived(self) -> bool: ...
    @property
    def is_moving(self) -> bool: ...
    @property
    def previous_angles(self) -> numpy.ndarray[typing.Literal[7], numpy.dtype[numpy.float64]]: ...
    @property
    def target_angles(self) -> numpy.ndarray[typing.Literal[7], numpy.dtype[numpy.float64]]: ...

class Sim:
    def __init__(self, mjmdl: int, mjdata: int) -> None: ...
    def step(self, k: int) -> None: ...
    def step_until_convergence(self) -> None: ...
