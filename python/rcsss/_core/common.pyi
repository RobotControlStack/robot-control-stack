# ATTENTION: auto generated from C++ code, use `make stubgen` to update!
"""
common module
"""
from __future__ import annotations

import typing

import numpy
import pybind11_stubgen.typing_ext

__all__ = [
    "FrankaHandTCPOffset",
    "GConfig",
    "GState",
    "Gripper",
    "IK",
    "IdentityRotMatrix",
    "IdentityRotQuartVec",
    "IdentityTranslation",
    "NRobotsWithGripper",
    "Pose",
    "RConfig",
    "RL",
    "RPY",
    "RState",
    "Robot",
    "RobotWithGripper",
]

class GConfig:
    pass

class GState:
    pass

class Gripper:
    def get_normalized_width(self) -> float: ...
    def get_parameters(self) -> GConfig: ...
    def get_state(self) -> GState: ...
    def grasp(self) -> None: ...
    def is_grasped(self) -> bool: ...
    def open(self) -> None: ...
    def reset(self) -> None: ...
    def set_normalized_width(self, width: float, force: float = 0) -> None: ...
    def shut(self) -> None: ...

class IK:
    def ik(
        self, pose: Pose, q0: numpy.ndarray[typing.Literal[7], numpy.dtype[numpy.float64]], tcp_offset: Pose = ...
    ) -> numpy.ndarray[typing.Literal[7], numpy.dtype[numpy.float64]] | None: ...

class NRobotsWithGripper:
    def __init__(self, robots_with_gripper: list[RobotWithGripper]) -> None: ...
    def get_cartesian_position(self, idxs: list[int]) -> list[Pose]: ...
    def get_joint_position(
        self, idxs: list[int]
    ) -> list[numpy.ndarray[typing.Literal[7], numpy.dtype[numpy.float64]]]: ...
    def get_parameters_g(self, idxs: list[int]) -> list[GConfig | None]: ...
    def get_parameters_r(self, idxs: list[int]) -> list[RConfig]: ...
    def get_state_g(self, idxs: list[int]) -> list[GState | None]: ...
    def get_state_r(self, idxs: list[int]) -> list[RState]: ...
    def grasp(self, idxs: list[int]) -> None: ...
    def move_home(self, idxs: list[int]) -> None: ...
    def open(self, idxs: list[int]) -> None: ...
    def set_cartesian_position(self, idxs: list[int], pose: list[Pose]) -> None: ...
    def set_joint_position(
        self, idxs: list[int], q: list[numpy.ndarray[typing.Literal[7], numpy.dtype[numpy.float64]]]
    ) -> None: ...
    def shut(self, idxs: list[int]) -> None: ...

class Pose:
    def __getstate__(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(16)]: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, pose_matrix: numpy.ndarray[tuple[typing.Literal[4], typing.Literal[4]], numpy.dtype[numpy.float64]]
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        rotation: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[3]], numpy.dtype[numpy.float64]],
        translation: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]],
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        quaternion: numpy.ndarray[typing.Literal[4], numpy.dtype[numpy.float64]],
        translation: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]],
    ) -> None: ...
    @typing.overload
    def __init__(self, rpy: RPY, translation: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]]) -> None: ...
    @typing.overload
    def __init__(
        self,
        rpy_vector: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]],
        translation: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]],
    ) -> None: ...
    @typing.overload
    def __init__(self, translation: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]]) -> None: ...
    @typing.overload
    def __init__(self, quaternion: numpy.ndarray[typing.Literal[4], numpy.dtype[numpy.float64]]) -> None: ...
    @typing.overload
    def __init__(self, rpy: RPY) -> None: ...
    @typing.overload
    def __init__(
        self, rotation: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[3]], numpy.dtype[numpy.float64]]
    ) -> None: ...
    @typing.overload
    def __init__(self, pose: Pose) -> None: ...
    def __mul__(self, arg0: Pose) -> Pose: ...
    def __setstate__(self, arg0: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(16)]) -> None: ...
    def __str__(self) -> str: ...
    def interpolate(self, dest_pose: Pose, progress: float) -> Pose: ...
    def inverse(self) -> Pose: ...
    def is_close(self, other: Pose, eps_r: float = 1e-08, eps_t: float = 1e-08) -> bool: ...
    def limit_rotation_angle(self, max_angle: float) -> Pose: ...
    def limit_translation_length(self, max_length: float) -> Pose: ...
    def pose_matrix(self) -> numpy.ndarray[tuple[typing.Literal[4], typing.Literal[4]], numpy.dtype[numpy.float64]]: ...
    def rotation_m(self) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[3]], numpy.dtype[numpy.float64]]: ...
    def rotation_q(self) -> numpy.ndarray[typing.Literal[4], numpy.dtype[numpy.float64]]: ...
    def rotation_rpy(self) -> RPY: ...
    def total_angle(self) -> float: ...
    def translation(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]]: ...
    def xyzrpy(self) -> numpy.ndarray[typing.Literal[6], numpy.dtype[numpy.float64]]: ...

class RConfig:
    pass

class RL(IK):
    def __init__(self, urdf_path: str, max_duration_ms: int = 300) -> None: ...

class RPY:
    pitch: float
    roll: float
    yaw: float
    def __add__(self, arg0: RPY) -> RPY: ...
    def __getstate__(self) -> tuple: ...
    @typing.overload
    def __init__(self, roll: float = 0.0, pitch: float = 0.0, yaw: float = 0.0) -> None: ...
    @typing.overload
    def __init__(self, rpy: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]]) -> None: ...
    def __setstate__(self, arg0: tuple) -> None: ...
    def __str__(self) -> str: ...
    def as_quaternion_vector(self) -> numpy.ndarray[typing.Literal[4], numpy.dtype[numpy.float64]]: ...
    def as_vector(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]]: ...
    def is_close(self, other: RPY, eps: float = 1e-08) -> bool: ...
    def rotation_matrix(
        self,
    ) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[3]], numpy.dtype[numpy.float64]]: ...

class RState:
    pass

class Robot:
    def get_base_pose_in_world_coordinates(self) -> Pose: ...
    def get_cartesian_position(self) -> Pose: ...
    def get_ik(self) -> IK | None: ...
    def get_joint_position(self) -> numpy.ndarray[typing.Literal[7], numpy.dtype[numpy.float64]]: ...
    def get_parameters(self) -> RConfig: ...
    def get_state(self) -> RState: ...
    def move_home(self) -> None: ...
    def reset(self) -> None: ...
    def set_cartesian_position(self, pose: Pose) -> None: ...
    def set_joint_position(self, q: numpy.ndarray[typing.Literal[7], numpy.dtype[numpy.float64]]) -> None: ...
    def to_pose_in_robot_coordinates(self, pose_in_world_coordinates: Pose) -> Pose: ...
    def to_pose_in_world_coordinates(self, pose_in_robot_coordinates: Pose) -> Pose: ...

class RobotWithGripper:
    def __init__(self, robot: Robot, gripper: Gripper | None) -> None: ...

def FrankaHandTCPOffset() -> numpy.ndarray[tuple[typing.Literal[4], typing.Literal[4]], numpy.dtype[numpy.float64]]: ...
def IdentityRotMatrix() -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[3]], numpy.dtype[numpy.float64]]: ...
def IdentityRotQuartVec() -> numpy.ndarray[typing.Literal[4], numpy.dtype[numpy.float64]]: ...
def IdentityTranslation() -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float64]]: ...
