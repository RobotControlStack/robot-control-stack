# ATTENTION: auto generated from C++ code, use `make stubgen` to update!
"""
common module
"""
from __future__ import annotations

import typing

import numpy

__all__ = [
    "GConfig",
    "GState",
    "Gripper",
    "NRobotsWithGripper",
    "Pose",
    "RConfig",
    "RPY",
    "RState",
    "Robot",
    "RobotWithGripper",
]

class GConfig:
    pass

class GState:
    pass

class Gripper:
    def get_parameters(self) -> GConfig: ...
    def get_state(self) -> GState: ...
    def grasp(self) -> bool: ...
    def release(self) -> None: ...
    def set_parameters(self, cfg: GConfig) -> bool: ...
    def shut(self) -> None: ...

class NRobotsWithGripper:
    def __init__(self, robots_with_gripper: list[RobotWithGripper]) -> None: ...
    def get_cartesian_position(self, idxs: list[int]) -> list[Pose]: ...
    def get_joint_position(
        self, idxs: list[int]
    ) -> list[numpy.ndarray[tuple[typing.Literal[7], typing.Literal[1]], numpy.dtype[numpy.float64]]]: ...
    def get_parameters_g(self, idxs: list[int]) -> list[GConfig | None]: ...
    def get_parameters_r(self, idxs: list[int]) -> list[RConfig]: ...
    def get_state_g(self, idxs: list[int]) -> list[GState | None]: ...
    def get_state_r(self, idxs: list[int]) -> list[RState]: ...
    def grasp(self, idxs: list[int]) -> list[bool | None]: ...
    def move_home(self, idxs: list[int]) -> None: ...
    def release(self, idxs: list[int]) -> None: ...
    def set_cartesian_position(self, idxs: list[int], pose: list[Pose]) -> None: ...
    def set_joint_position(
        self,
        idxs: list[int],
        q: list[numpy.ndarray[tuple[typing.Literal[7], typing.Literal[1]], numpy.dtype[numpy.float64]]],
    ) -> None: ...
    def set_parameters_g(self, idxs: list[int], cfgs: list[GConfig]) -> None: ...
    def set_parameters_r(self, idxs: list[int], cfgs: list[RConfig]) -> None: ...
    def shut(self, idxs: list[int]) -> None: ...

class Pose:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, pose: numpy.ndarray[tuple[typing.Literal[4], typing.Literal[4]], numpy.dtype[numpy.float64]]
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        rotation: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[3]], numpy.dtype[numpy.float64]],
        translation: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]],
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        quaternion: numpy.ndarray[tuple[typing.Literal[4], typing.Literal[1]], numpy.dtype[numpy.float64]],
        translation: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]],
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        rpy: RPY,
        translation: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]],
    ) -> None: ...
    def __mul__(self, arg0: Pose) -> Pose: ...
    def __str__(self) -> str: ...
    def interpolate(self, dest_pose: Pose, progress: float) -> Pose: ...
    def pose_matrix(self) -> numpy.ndarray[tuple[typing.Literal[4], typing.Literal[4]], numpy.dtype[numpy.float64]]: ...
    def rotation_m(self) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[3]], numpy.dtype[numpy.float64]]: ...
    def rotation_q(self) -> numpy.ndarray[tuple[typing.Literal[4], typing.Literal[1]], numpy.dtype[numpy.float64]]: ...
    def rotation_rpy(self) -> RPY: ...
    def translation(self) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]: ...

class RConfig:
    pass

class RPY:
    pitch: float
    roll: float
    yaw: float
    def __add__(self, arg0: RPY) -> RPY: ...
    def __init__(self, roll: float = 0.0, pitch: float = 0.0, yaw: float = 0.0) -> None: ...
    def __str__(self) -> str: ...
    def rotation_matrix(
        self,
    ) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[3]], numpy.dtype[numpy.float64]]: ...

class RState:
    pass

class Robot:
    def get_cartesian_position(self) -> Pose: ...
    def get_joint_position(
        self,
    ) -> numpy.ndarray[tuple[typing.Literal[7], typing.Literal[1]], numpy.dtype[numpy.float64]]: ...
    def get_parameters(self) -> RConfig: ...
    def get_state(self) -> RState: ...
    def move_home(self) -> None: ...
    def set_cartesian_position(self, pose: Pose) -> None: ...
    def set_joint_position(
        self, q: numpy.ndarray[tuple[typing.Literal[7], typing.Literal[1]], numpy.dtype[numpy.float64]]
    ) -> None: ...
    def set_parameters(self, cfg: RConfig) -> bool: ...

class RobotWithGripper:
    def __init__(self, robot: Robot, gripper: Gripper | None) -> None: ...
